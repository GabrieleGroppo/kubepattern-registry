{
    "version": "kubepattern.sigemi.it/v1",
    "kind": "Pattern",
    "metadata": {
        "name": "simple-predictable-demands",
        "displayName": "Simple Predictable Demands",
        "patternType": "FOUNDATIONAL",
        "severity": "Warning",
        "category": "architecture",
        "docUrl": "https://kubernetes.io/docs/concepts/workloads/pods/sidecar-containers/",
        "gitUrl": "https://github.com/GabrieleGroppo/kubepattern-registry/tree/main/doc/sidecar-pattern.md",
        "patternURI": "kubepattern://foundational/simple-predictable-demands"
    },
    "spec": {
        "description": "Identifies pods that should implement the sidecar pattern but are incorrectly separated into different pods. The sidecar pattern places helper containers alongside the main application container in the same pod to share lifecycle, network, and storage resources. Common use cases include logging, monitoring, configuration management, and service mesh proxies.",
        "message": "Pod '{{main-app.metadata.name}}' in namespace '{{main-app.metadata.namespace}}' appears to be separated from its sidecar pod '{{sidecar.metadata.name}}' in namespace '{{sidecar.metadata.namespace}}'. These pods share volumes and likely have a common lifecycle, suggesting they should be combined into a single pod with multiple containers. This would improve resource sharing, deployment atomicity, and reduce network overhead.",
        "topology": "SINGLE",
        "leader": "single-pod",
        "resources": [
            {
                "resource": "Pod",
                "id": "single-pod",
                "filters": {
                    "matchAll": null,
                    "matchNone": [
                        {
                            "key": ".metadata.namespace",
                            "operator": "EQUALS",
                            "values": [
                                "kube-system",
                                "kube-public",
                                "kube-node-lease"
                            ]
                        }
                    ],
                    "matchAny": [
                        {
                            "key": ".spec.containers[*].resources.limits.cpu",
                            "operator": "IS_EMPTY",
                            "values": []
                        },
                        {
                            "key": ".spec.containers[*].resources.limits.memory",
                            "operator": "IS_EMPTY",
                            "values": []
                        }
                    ]
                }
            }
        ],
        "relationships": []
    }
}